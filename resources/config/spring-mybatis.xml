<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- 得到dataSource配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 开启service注解 -->
	<context:component-scan base-package="com.qingtao.service" />

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 数据库基本信息配置 -->
		<property name="driverClass" value="${jdbc.Driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接数 -->
		<property name="initialPoolSize" value="4"/>
		<!--连接池中保留的最大连接数。默认值: 15 -->
		<property name="maxPoolSize" value="20" />
		<!-- 连接池中保留的最小连接数，默认为：3 -->
		<property name="minPoolSize" value="2" />
		<!--最大空闲时间，30秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
		<property name="maxIdleTime" value="30" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
		<property name="acquireIncrement" value="2" />
	</bean>

	<!-- 配置sessionFactroy -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/mapper/*.xml" />
		<property name="typeAliasesPackage" value="com.qingtao.pojo" />
	</bean>

	<!-- 注入DAO -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.qingtao.dao" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory" />
	</bean>

	<!-- dataSource事务托管 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 自定义Realm -->
	<bean id="myRealm" class="com.qingtao.realm.MyRealm" />

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
	</bean>

	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 身份认证失败，则跳转到登录页面的配置 -->
		<property name="loginUrl" value="/login.jsp" />
		<!-- 权限认证失败，则跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/login.jsp" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- anon可以匿名使用 authc需要认证(登录)才能使用 -->
		<property name="filterChainDefinitions">
			<value>
				/auth/**=authc
			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro注解 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="read*" read-only="true" />
			<tx:method name="create*" rollback-for="java.lang.Exception" />
			<tx:method name="update*" rollback-for="java.lang.Exception" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置切面 -->
	<aop:config>
		<!-- 切点 -->
		<aop:pointcut expression="execution(* com.qingtao.service.*.* (..))"
			id="txPointcut" />
		<!-- 绑定事务切点 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
</beans>